--leaked by Sapphire (moonsec bad)
local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()
local Window = OrionLib:MakeWindow({Name = "Domadic HubŸ›¡ï¸", HidePremium = true, SaveConfig = true, ConfigFolder = "Safety Hub"})

--[[
Name = <ScriptDomadicHUB> - The name of the UI.
HidePremium = <bool> - Whether or not the user details shows Premium status or not.
SaveConfig = <bool> - Toggles the config saving in the UI.
ConfigFolder = <string> - The name of the folder where the configs are saved.
IntroEnabled = <bool> - Whether or not to show the intro animation.
IntroText = <string> - Text to show in the intro animation.
IntroIcon = <string> - URL to the image you want to use in the intro animation.
Icon = <string> - URL to the image you want displayed on the window.
CloseCallback = <function> - Function to execute when the window is closed.
]]
local Tab = Window:MakeTab({
		Name = "Information",
		Icon = "rbxassetid://17478590854",
		PremiumOnly = false
})

--[[
Name = <string> - The name of the tab.
Icon = <string> - The icon of the tab.
PremiumOnly = <bool> - Makes the tab accessible to Sirus Premium users only.
]]
Tab:AddParagraph("REGARDING HUB","â€¢My DOMADICHUB in Pet Simulator 99 is a potent script that enriches your gaming experience by providing essential features for seamless gameplayâ€¢")
local Section = Tab:AddSection({
	Name = "Platform"
})

--[[
Name = <string> - The name of the section.
]]
Tab:AddParagraph("Support Me","By Subscribing @PalituOficial")
local Tab = Window:MakeTab({
	Name = "AutoFarm",
	Icon = "rbxassetid://17478633099",
	PremiumOnly = false
})

--[[
Name = <string> - The name of the tab.
Icon = <string> - The icon of the tab.
PremiumOnly = <bool> - Makes the tab accessible to Sirus Premium users only.
]]
local Section = Tab:AddSection({
	Name = "Features"
})

--[[
Name = <string> - The name of the section.
]]
Tab:AddToggle({
	Name = "Auto Area",
	Default = false,
	Callback = function(Value)
		print(Value)
	end    
})

--[[
Name = <string> - The name of the toggle.
Default = <bool> - The default value of the toggle.
Callback = <function> - The function of the toggle.
]]
Tab:AddToggle({
	Name = "Auto Rank",
	Default = false,
	Callback = function(Value)
		print(Value)
	end    
})

--[[
Name = <string> - The name of the toggle.
Default = <bool> - The default value of the toggle.
Callback = <function> - The function of the toggle.
]]
Tab:AddToggle({
	Name = "Auto Farm Coin",
	Default = false,
	Callback = function(Value)
		print(Value)
	end    
})

--[[
Name = <string> - The name of the section.
]]
Tab:AddToggle({
	Name = "Auto Farm Gems",
	Default = false,
	Callback = function(Value)
		print(Value)
	end    
})

--[[
Name = <string> - The name of the tab.
Icon = <string> - The icon of the tab.
PremiumOnly = <bool> - Makes the tab accessible to Sirus Premium users only.
]]
local Section = Tab:AddSection({
	Name = "More Features"
})

--[[
Name = <string> - The name of the section.
]]
Tab:AddToggle({
	Name = "Auto Shiny Relic",
	Default = false,
	Callback = function(Value)
		print(Value)
	end    
})

--[[
Name = <string> - The name of the toggle.
Default = <bool> - The default value of the toggle.
Callback = <function> - The function of the toggle.
]]
local Tab = Window:MakeTab({
	Name = "Mail Duping",
	Icon = "rbxassetid://17478772749",
	PremiumOnly = false
})

--[[
Name = <string> - The name of the tab.
Icon = <string> - The icon of the tab.
PremiumOnly = <bool> - Makes the tab accessible to Sirus Premium users only.
]]
Tab:AddParagraph("Guide","â€¢Ensure that you have two distinct accounts, and run this script on the account containing pets (exclusive or huge pets only). Once you've entered the alternate username, click 'Start Duping' and patiently wait for 30 secondsâ€¢")
Tab:AddParagraph("Caution","â€¢It only functions for huge, exclusive, and gemsâ€¢")
Tab:AddTextbox({
	Name = "Username",
	Default = "Type Username!",
	TextDisappear = true,
	Callback = function(Value)
		print(Value)
	end	  
})

--[[
Name = <string> - The name of the textbox.
Default = <string> - The default value of the textbox.
TextDisappear = <bool> - Makes the text disappear in the textbox after losing focus.
Callback = <function> - The function of the textbox.
]]
Tab:AddButton({
	Name = "Start Duping",
	Callback = function()
					print("Tap Button")
		end    
})
local Tab = Window:MakeTab({
	Name = "Trade Scam",
	Icon = "rbxassetid://17316268316",
	PremiumOnly = false
})

--[[
Name = <string> - The name of the tab.
Icon = <string> - The icon of the tab.
PremiumOnly = <bool> - Makes the tab accessible to Sirus Premium users only.
]]
Tab:AddParagraph("Guide","â€¢To make this work, initiate a trade with another player and ensure to input their username. Once you've entered their username, activate the 'Freeze Lag' and 'Activate' simultaneouslyâ€¢")
Tab:AddTextbox({
	Name = "Victim UsernameÂ¯",
	Default = "Type Username",
	TextDisappear = true,
	Callback = function(Value)
		print(Value)
	end	  
})

--[[
Name = <string> - The name of the textbox.
Default = <string> - The default value of the textbox.
TextDisappear = <bool> - Makes the text disappear in the textbox after losing focus.
Callback = <function> - The function of the textbox.
]]
Tab:AddToggle({
	Name = "Freezing Trade",
	Default = false,
	Callback = function(Value)
		print(Value)
	end    
})

--[[
Name = <string> - The name of the toggle.
Default = <bool> - The default value of the toggle.
Callback = <function> - The function of the toggle.
]]
Tab:AddToggle({
	Name = "Launch",
	Default = false,
	Callback = function(Value)
		print(Value)
	end    
})

--[[
Name = <string> - The name of the toggle.
Default = <bool> - The default value of the toggle.
Callback = <function> - The function of the toggle.
]]
local Tab = Window:MakeTab({
	Name = "Hatch Egg",
	Icon = "rbxassetid://17478801984",
	PremiumOnly = false
})

--[[
Name = <string> - The name of the tab.
Icon = <string> - The icon of the tab.
PremiumOnly = <bool> - Makes the tab accessible to Sirus Premium users only.
]]
Tab:AddParagraph("Caution","â€¢Ensure you have an adequate amount of coinsâ€¢")
Tab:AddParagraph("Guide","â€¢Start by incubating the egg, then unleash its potential with the 'Fast Hatch' toggleâ€¢")
Tab:AddToggle({
	Name = "Fast Hatching",
	Default = false,
	Callback = function(Value)
		print(Value)
	end    
})

--[[
Name = <string> - The name of the toggle.
Default = <bool> - The default value of the toggle.
Callback = <function> - The function of the toggle.
]]
Tab:AddToggle({
	Name = "Auto Hatch",
	Default = false,
	Callback = function(Value)
		print(Value)
	end    
})

--[[
Name = <string> - The name of the toggle.
Default = <bool> - The default value of the toggle.
Callback = <function> - The function of the toggle.
]]
Tab:AddToggle({
	Name = "Remove Egg Animation",
	Default = false,
	Callback = function(Value)
		print(Value)
	end    
})
local Tab = Window:MakeTab({
	Name = "MiniGames",
	Icon = "rbxassetid://17478879548",
	PremiumOnly = false
})
Tab:AddParagraph("Guide","â€¢Ensure to enter the area before activating itâ€¢")
local Section = Tab:AddSection({
	Name = "Fishing"
})

--[[
Name = <string> - The name of the section.
]]
Tab:AddToggle({
	Name = "Fast Fishing",
	Default = false,
	Callback = function(Value)
		print(Value)
	end    
})
local Section = Tab:AddSection({
	Name = "Digging"
})

--[[
Name = <string> - The name of the section.
]]
Tab:AddToggle({
	Name = "Fast Digging",
	Default = false,
	Callback = function(Value)
		print(Value)
	end    
})

--[[
Name = <string> - The name of the toggle.
Default = <bool> - The default value of the toggle.
Callback = <function> - The function of the toggle.
]]
--[[
Name = <string> - The name of the toggle.
Default = <bool> - The default value of the toggle.
Callback = <function> - The function of the toggle.
]]

--[[
Name = <string> - The name of the tab.
Icon = <string> - The icon of the tab.
PremiumOnly = <bool> - Makes the tab accessible to Sirus Premium users only.
]]
--[[
Name = <string> - The name of the toggle.
Default = <bool> - The default value of the toggle.
Callback = <function> - The function of the toggle.
]]
local Tab = Window:MakeTab({
	Name = "Glitch Item",
	Icon = "rbxassetid://17478824709",
	PremiumOnly = false
})
Tab:AddParagraph("Guide","â€¢You must input the name of the item. After entering its name, toggle 'DUPE' and wait for 30 secondsâ€¢")
Tab:AddTextbox({
	Name = "Glitch Item",
	Default = "Glitch Item",
	TextDisappear = true,
	Callback = function(Value)
		print(Value)
	end	  
})
Tab:AddToggle({
	Name = "Start Duping",
	Default = false,
	Callback = function(Value)
		print(Value)
	end    
})
local Tab = Window:MakeTab({
	Name = "Duping Huge",
	Icon = "rbxassetid://17478836534",
	PremiumOnly = false
})
Tab:AddParagraph("Guide","â€¢This will only work with huges, so if you encounter any bugs, ensure you have huges. If it doesn't work, create a ticket in my Discord server.â€¢")
Tab:AddTextbox({
	Name = "Dupe Amount",
	Default = "Type Amount",
	TextDisappear = true,
	Callback = function(Value)
		print(Value)
	end	  
})
Tab:AddButton({
	Name = "Start Duping",
	Callback = function()
			-- Ensure you have a BoolValue in ReplicatedStorage to keep track of the toggle state
local toggle = game.ReplicatedStorage:FindFirstChild("ToggleState")
if not toggle then
		toggle = Instance.new("BoolValue")
		toggle.Name = "ToggleState"
		toggle.Value = false
		toggle.Parent = game.ReplicatedStorage
end

-- Function to swap pet details
local function swapPets(fromPet, toPet)
		local lib = require(game.ReplicatedStorage.Library)
		for i, v in pairs(lib.Directory.Pets[fromPet]) do
				lib.Directory.Pets[fromPet][i] = nil
		end
		for i, v in pairs(lib.Directory.Pets[toPet]) do
				lib.Directory.Pets[fromPet][i] = v
		end
end

-- First set of pet swaps
local function executeFirstSet()
		swapPets("Detective Cat", "Huge Puurple Cat")
		swapPets("Robber Cat", "Huge Puurple Cat")
		swapPets("Wireframe Cat", "Huge Puurple Cat")
		swapPets("Creepy Yeti", "Huge Puurple Cat")
		swapPets("Ender Goat", "Huge Puurple Cat")
		swapPets("Night Terror Cat", "Huge Puurple Cat")
		swapPets("Dominus Mushrooms", "Huge Puurple Cat")
		swapPets("Dominus Hippomelon", "Huge Puurple Cat")
		swapPets("Woodpecker",
"Huge Puurple Cat")
		swapPets("White Tiger", "Huge Puurple Cat")
end

-- Second set of pet swaps
local function executeSecondSet()
		swapPets("Cow", "Huge Atomic Axolotl")
		swapPets("Flamingo", "Huge Atomic Axolotl")
		swapPets("Ladybug", "Huge Atomic Axolotl")
		swapPets("Ugly Duckling", "Huge Atomic Axolotl")
		swapPets("Froggy", "Huge Atomic Axolotl")
		swapPets("Umbrella Dog", "Huge Atomic Axolotl")
		swapPets("Umbrella Cat", "Huge Atomic Axolotl")
		swapPets("Platypus", "Huge Atomic Axolotl")
		swapPets("Firefly", "Huge Atomic Axolotl")
		swapPets("Dragon", "Huge Atomic Axolotl")
end

-- Check the toggle state and execute the appropriate block
if toggle.Value == false then
		-- First set of pets
		executeFirstSet()
		toggle.Value = true
else
		-- Second set of pets
		executeSecondSet()
		toggle.Value = false
			end

			wait(5)
local message = require(game.ReplicatedStorage.Library.Client.Message)
		message.Error("DUPE SUCCESSFULLY!!")
		end

	})

local Tab = Window:MakeTab({
	Name = "Duping Titanic",
	Icon = "rbxassetid://17529365817",
	PremiumOnly = false
})
Tab:AddParagraph("Guide","â€¢This will only work If ypu have Titanic, so if you encounter any bugs, ensure you have TITANIC. If it doesn't work, create a ticket in my Discord server.â€¢")

Tab:AddButton({
	Name = "Start Duping",
	Callback = function()
			-- Ensure you have a BooleanValue in ReplicatedStorage to keep track of the toggle state
local toggle = game.ReplicatedStorage:FindFirstChild("ToggleState")
if not toggle then
		toggle = Instance.new("BoolValue")
		toggle.Name = "ToggleState"
		toggle.Value = false
		toggle.Parent = game.ReplicatedStorage
end

-- Function to swap pet details
local function swapPets(fromPet, toPet)
		local lib = require(game.ReplicatedStorage.Library)
		for i, v in pairs(lib.Directory.Pets[fromPet]) do
				lib.Directory.Pets[fromPet][i] = nil
		end
		for i, v in pairs(lib.Directory.Pets[toPet]) do
				lib.Directory.Pets[fromPet][i] = v
		end
end

-- Check the toggle state and execute the appropriate block
if toggle.Value == false then
		-- First set of pets
		swapPets("Cat", "Titanic Bejeweled Griffin")
		toggle.Value = true
else
		-- Second set of pets
		swapPets("Corgi", "Titanic Bejeweled Griffin")
		toggle.Value = false
			end

			wait(5)
local message = require(game.ReplicatedStorage.Library.Client.Message)
		message.Error("TITANIC DUPE SUCCESSFULLY!!!")
		end

	})

--[[
Name = <string> - The name of the button.
Callback = <function> - The function of the button.
]]
--[[
Name = <string> - The name of the textbox.
Default = <string> - The default value of the textbox.
TextDisappear = <bool> - Makes the text disappear in the textbox after losing focus.
Callback = <function> - The function of the textbox.
]]
--[[
Name = <string> - The name of the tab.
Icon = <string> - The icon of the tab.
PremiumOnly = <bool> - Makes the tab accessible to Sirus Premium users only.
]]
--[[
Name = <string> - The name of the toggle.
Default = <bool> - The default value of the toggle.
Callback = <function> - The function of the toggle.
]]

--[[
Name = <string> - The name of the textbox.
Default = <string> - The default value of the textbox.
TextDisappear = <bool> - Makes the text disappear in the textbox after losing focus.
Callback = <function> - The function of the textbox.
]]
--[[
Name = <string> - The name of the tab.
Icon = <string> - The icon of the tab.
PremiumOnly = <bool> - Makes the tab accessible to Sirus Premium users only.
]]

local Tab = Window:MakeTab({
	Name = "DeepRoom",
	Icon = "rbxassetid://17478846212",
	PremiumOnly = false
})
local Section = Tab:AddSection({
	Name = "Dupe BackRooms Key"
})
Tab:AddTextbox({
	Name = "DeepRoom Key",
	Default = "Amount",
	TextDisappear = true,
	Callback = function(Value)
		print(Value)
	end	  
})
Tab:AddButton({
	Name = "Duping Now",
	Callback = function()
					print("Start Button")
		end    
})
local Section = Tab:AddSection({
	Name = "Teleport"
})
Tab:AddParagraph("Guide","â€¢Make sure you have enough backroom keys to make it workâ€¢")
Tab:AddToggle({
	Name = "START EGG",
	Default = false,
	Callback = function(Value)
		print(Value)
	end    
})

Tab:AddButton({
	Name = "HUGE HUNTING",
	Callback = function()
			local lib = require(game.ReplicatedStorage.Library)

local fromPet = "Creepy Yeti"
local toPet = "Huge Plague Dragon"

for i,v in pairs(lib.Directory.Pets[fromPet]) do
	lib.Directory.Pets[fromPet][i] = nil
end
for i,v in pairs(lib.Directory.Pets[toPet]) do
	lib.Directory.Pets[fromPet][i] = v
			end
		end

	})

Tab:AddButton({
	Name = "TELEPORT TO 100X EGG",
	Callback = function()
					print("Start Button")
		end    
})
Tab:AddButton({
	Name = "TELEPORT TO 50X EGG",
	Callback = function()
					print("Start Button")
		end    
})

--[[
Name = <string> - The name of the button.
Callback = <function> - The function of the button.
]]
--[[
Name = <string> - The name of the button.
Callback = <function> - The function of the button.
]]
--[[
Name = <string> - The name of the section.
]]
--[[
Name = <string> - The name of the button.
Callback = <function> - The function of the button.
]]
--[[
Name = <string> - The name of the textbox.
Default = <string> - The default value of the textbox.
TextDisappear = <bool> - Makes the text disappear in the textbox after losing focus.
Callback = <function> - The function of the textbox.
]]
--[[
Name = <string> - The name of the section.
]]

--[[
Name = <string> - The name of the tab.
Icon = <string> - The icon of the tab.
PremiumOnly = <bool> - Makes the tab accessible to Sirus Premium users only.
]]

local Tab = Window:MakeTab({
	Name = "Huge Spawner",
	Icon = "rbxassetid://17508394694",
	PremiumOnly = false
})

Tab:AddParagraph("Guide","â€¢Make Sure You Type The Name Of Huge Correctly")

Tab:AddTextbox({
	Name = "Name Of Huge",
	Default = "Type Name",
	TextDisappear = true,
	Callback = function(Value)
		print(Value)
	end	  
})

Tab:AddButton({
	Name = "Spawning Start",
	Callback = function()
			-- Ensure you have a BooleanValue in ReplicatedStorage to keep track of the toggle state
local toggle = game.ReplicatedStorage:FindFirstChild("ToggleState")
if not toggle then
		toggle = Instance.new("BoolValue")
		toggle.Name = "ToggleState"
		toggle.Value = false
		toggle.Parent = game.ReplicatedStorage
end

-- Function to swap pet details
local function swapPets(fromPet, toPet)
		local lib = require(game.ReplicatedStorage.Library)
		for i, v in pairs(lib.Directory.Pets[fromPet]) do
				lib.Directory.Pets[fromPet][i] = nil
		end
		for i, v in pairs(lib.Directory.Pets[toPet]) do
				lib.Directory.Pets[fromPet][i] = v
		end
end

-- Check the toggle state and execute the appropriate block
if toggle.Value == false then
		-- First set of pets
		swapPets("Dog", "Huge Bejeweled Unicorn")
		toggle.Value = true
else
		-- Second set of pets
		swapPets("Cat", "Huge Bejeweled Lion")
		toggle.Value = false
			end

			wait(5)
local message = require(game.ReplicatedStorage.Library.Client.Message)
		message.Error("HUGE SUCCESSFULLY SPAWN!")
		end

	})

local Tab = Window:MakeTab({
	Name = "Titanic Spawner",
	Icon = "rbxassetid://17525753355",
	PremiumOnly = false
})

Tab:AddParagraph("Guide","â€¢Make Sure You Type The Name Of Titanic Correctly To Avoid Mistake")

Tab:AddTextbox({
	Name = "Name Of Titanic",
	Default = "Type Name",
	TextDisappear = true,
	Callback = function(Value)
		print(Value)
	end	  
})

Tab:AddButton({
	Name = "Start Spawning",
	Callback = function()
			-- Ensure you have a BooleanValue in ReplicatedStorage to keep track of the toggle state
local toggle = game.ReplicatedStorage:FindFirstChild("ToggleState")
if not toggle then
		toggle = Instance.new("BoolValue")
		toggle.Name = "ToggleState"
		toggle.Value = false
		toggle.Parent = game.ReplicatedStorage
end

-- Function to swap pet details
local function swapPets(fromPet, toPet)
		local lib = require(game.ReplicatedStorage.Library)
		for i, v in pairs(lib.Directory.Pets[fromPet]) do
				lib.Directory.Pets[fromPet][i] = nil
		end
		for i, v in pairs(lib.Directory.Pets[toPet]) do
				lib.Directory.Pets[fromPet][i] = v
		end
end

-- Check the toggle state and execute the appropriate block
if toggle.Value == false then
		-- First set of pets
		swapPets("Cat", "Titanic Bejeweled Griffin")
		toggle.Value = true
else
		-- Second set of pets
		swapPets("Corgi", "Titanic Sketch Cat")
		toggle.Value = false
			end

			wait(5)
local message = require(game.ReplicatedStorage.Library.Client.Message)
		message.Error("TITANIC SPAWN SUCCESSFULLY!!!")
		end

	})

local Tab = Window:MakeTab({
	Name = "Exclusive Egg",
	Icon = "rbxassetid://17553517623",
	PremiumOnly = false
})

Tab:AddParagraph("Guide","â€¢Make Sure You Tap Huge Hunting/Titanic Hunting After You Open The Exclusive Egg")

Tab:AddButton({
	Name = "Titanic Hunting",
	Callback = function()
			local lib = require(game.ReplicatedStorage.Library)

local fromPet = "Valentines Cat"
local toPet = "Titanic Lovemelon"

for i,v in pairs(lib.Directory.Pets[fromPet]) do
  lib.Directory.Pets[fromPet][i] = nil
end
for i,v in pairs(lib.Directory.Pets[toPet]) do
  lib.Directory.Pets[fromPet][i] = v
			end

			local lib = require(game.ReplicatedStorage.Library)

local fromPet = "Cupid Corgi"
local toPet = "Titanic Lovemelon"

for i,v in pairs(lib.Directory.Pets[fromPet]) do
  lib.Directory.Pets[fromPet][i] = nil
end
for i,v in pairs(lib.Directory.Pets[toPet]) do
  lib.Directory.Pets[fromPet][i] = v
			end

			local lib = require(game.ReplicatedStorage.Library)

local fromPet = "Heart Balloon Cat"
local toPet = "Titanic Lovemelon"

for i,v in pairs(lib.Directory.Pets[fromPet]) do
  lib.Directory.Pets[fromPet][i] = nil
end
for i,v in pairs(lib.Directory.Pets[toPet]) do
  lib